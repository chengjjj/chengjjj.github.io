<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git push的时候报错remote: Permission to xxx/xxx.git denied to xxx.]]></title>
    <url>%2F2019%2F07%2F27%2Fgit-push%E7%9A%84%E6%97%B6%E5%80%99%E6%8A%A5%E9%94%99remote-Permission-to-xxx-xxx-git-denied-to-xxx%2F</url>
    <content type="text"><![CDATA[问题产生当push代码的时候出现Permission问题 问题原因看报错remote: Permission to chengjjj/xxx.github.io.git denied to xxx.应该是本地git配置和自己仓库配置不一致导致的。但是自己再三核实的git配置，确保配置程池然后看是windows系统的控制面板中的凭据管理记录了另一个github账号需要在控制面板 -&gt; 所有控制面板中更改原来的github配置此处应有图片]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python正则表达式]]></title>
    <url>%2F2019%2F07%2F24%2Fpython%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[概括字符集#\d（[0-9]） \D（[^0-9]） #\w（[A-Za-z_0-9]） \W ([^A-Za-z_0-9]) #.表示除了换行符的所有字符 #以python为例 import re a = &apos;python 11\t11java&amp;1223\nh\rp&apos; r = re.findall(&apos;\w&apos;, a) print(r)数量词#以python为例 import re a = 'python 11\t11java&amp;1223\nh\rp' #默认贪婪模式 r = re.findall('[a-z]{3,6}', a) #非贪婪模式 r1 = re.findall('[a-z]{3,6}?', a) # *匹配0次或者无限多次 a = 'pytho0npython1pythonn2' r2 = re.findall('python*', a) # +匹配1次或者无限多次 a = 'pytho0npython1pythonn2' r2 = re.findall('python+', a) # ?匹配0次或者1次 a = 'pytho0npython1pythonn2' r2 = re.findall('python?', a) print(r) 边界匹配import re qq = '10000000001' r = re.findall('^\d{4,8}$', qq) r = re.findall('000$', qq)#显示为空 print(r) 中文范围 UTF-8 (Unicode) \u4e00-\u9fa5 (中文) \x3130-\x318F (韩文) \xAC00-\xD7A3 (韩文) \u0800-\u4e00 (日文)]]></content>
      <categories>
        <category>Python3</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python函数式编程]]></title>
    <url>%2F2019%2F07%2F24%2Fpython%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[闭包闭包是由函数及其相关的引用环境组合而成的实体(即：闭包=函数+引用环境) # def curve_pre(): # a = 25 # b = 20 # c = 10 # def curve(x): # print('this is curve') # return a*x*b # # def fun(): # return c*2 # # return curve # # f = curve_pre() # print(f.__closure__[0].cell_contents) # print(f.__name__) # print(f(2)) def foo(): m = 9 n = 8 def foo1(): # m = 1 print(n) print(m) foo1() print(m) return foo1 # return foo1() f = foo() print(f.__closure__) 闭包测试 ###每次走step，求从0开始的当前位置 origin = 0 def walk(pos = origin): def striagh(step): global origin pos = step + origin origin = pos return origin return striagh stra = walk() print(stra(10)) print(stra(1)) python中的三元表达式 #x &gt; y ? x : y #python版本三元表达式的代码 #条件为真时候的d返回 if 条件判断 else 条件为假的时候的返回 x = 2 y = 1 r = x if x &gt; y else y print(r) 匿名函数(lambda表达式) def add(x ,y): return x+y; print(add(2,3)) f = lambda x,y : x + y print(f(2,3)) python函数map的使用map() 会根据提供的函数对指定序列做映射。 第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。 # map函数语法: # function -- 函数 # iterable -- 一个或多个序列 map(function, iterable, ...) # map函数使用示例1 list_x = [1,2,3,4] def square(x): return x*x r = map(square, list_x) print(r) print(list(r)) # map使用示例2 list_x = [1,2,3,4] list_y = [1,2,3,4] #list_y = [1,2,3] r = map(lambda x,y : x*x + y, list_x, list_y) print(list(r)) python中的reduce函数from functools import reduce #连续计算，连续调用lambda list_x = [1,2,3,4] r = reduce(lambda x,y:x+y, list_x) #r = reduce(lambda x,y:x+y, list_x, 10)#10是初始值 print(r) python装饰器import time def f1(): print('a function') def f2(): print('b function') def print_current_time(func): print(time.time()) func() print_current_time(f1) print_current_time(f2) import time def f1(): print('a function') def decorator(func): def wrapper(): print(time.time()) func() return wrapper f = decorator(f1) f() 装饰器+语法糖import time def decorator(func): def wrapper(): print(time.time()) func() return wrapper @decorator def f1(): print('a function') #f = decorator(f1) #f() f1() import time def decorator1(func): def wrapper(*args): print(time.time()) func(*args) return wrapper @decorator1 def f1(func_name): print('a function:' + func_name) @decorator1 def f2(func_name, func_name1): print('a function:' + func_name) print('a function:' + func_name1) def f3(func_name, func_name1, **kw): print('a function:' + func_name) print('a function:' + func_name1) print(kw) #f = decorator(f1) #f() f1('123') f2('123','2') f3('123','2', a=1, b=2, c='321' import time def decorator1(func): def wrapper(*args, **kw): print(time.time()) func(*args, **kw) return wrapper @decorator1 def f2(func_name, func_name1): print('a function:' + func_name) print('a function:' + func_name1) @decorator1 def f3(func_name, func_name1, **kw): print('a function:' + func_name) print('a function:' + func_name1) print(kw) f3('123','2', a=1, b=2, c='321')]]></content>
      <categories>
        <category>Python3</category>
      </categories>
      <tags>
        <tag>函数式编程</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python基本数据类型]]></title>
    <url>%2F2019%2F07%2F24%2Fpython%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[python基本数据类型Python3 中有六个标准的数据类型： Number（数字） String（字符串） List（列表） Tuple（元组） Set（集合） Dictionary（字典） 不可变数据: Number（数字）、String（字符串）、Tuple（元组）；可变数据: List（列表）、Dictionary（字典）、Set（集合）. python中二维数组赋值浅拷贝问题12345# 这会造成浅拷贝的问题d = [[]]d[0].append(2)# 赋值改为下面这种方式避免浅拷贝lists = [[] for i in range(3)]]]></content>
      <categories>
        <category>Python3</category>
      </categories>
      <tags>
        <tag>数据类型</tag>
        <tag>二维数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL优化]]></title>
    <url>%2F2019%2F07%2F24%2FMySQL%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[优化Count 问题产生 使用Springboot JPA的分页查询的时候,会带上一个count(*)语句,在count的数量在1400万左右的时候,耗时大概在20秒以上 count性能对比 性能 : count(1) &gt; count(id) &gt; count(*) like优化在做查询的时候,难免存在需要字符串模糊查询,数据量稍微大一点的话效率就很低的下,此时可以用前缀索引替代.]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[好用的软件]]></title>
    <url>%2F2019%2F07%2F24%2F%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[护眼软件Flux 安装 123sudo add-apt-repository ppa:nathan-renniewaldock/fluxsudo apt-get updatesudo apt-get install fluxgui 遇到的问题 无法运行 123456789# 出错Traceback (most recent call last): File &quot;/usr/local/bin/fluxgui&quot;, line 17, in &lt;module&gt; from fluxgui.fluxapp import main File &quot;/home/chengj/.local/lib/python3.6/site-packages/fluxgui/fluxapp.py&quot;, line 8, in &lt;module&gt; gi.require_version(&apos;AppIndicator3&apos;, &apos;0.1&apos;) File &quot;/usr/lib/python3/dist-packages/gi/__init__.py&quot;, line 130, in require_version raise ValueError(&apos;Namespace %s not available&apos; % namespace)ValueError: Namespace AppIndicator3 not available 解决方法:是缺少了某个包,安装对应包 1sudo apt-get install gir1.2-appindicator3-0.1 Navicat 安装后字体不正常显示 因为navicat软件是windows软件,在ubuntu系统上有的字体不支持,默认字体就可能不支持,所以修改字体,将字体改为Noto Sans mono CJK SC Regular可以解决了问题]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Flux</tag>
        <tag>Navicat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu14系统修改终端颜色]]></title>
    <url>%2F2019%2F07%2F24%2FUbuntu14%E7%B3%BB%E7%BB%9F%E4%BF%AE%E6%94%B9%E7%BB%88%E7%AB%AF%E9%A2%9C%E8%89%B2%2F</url>
    <content type="text"><![CDATA[问题ubuntu14系统终端全白,看的不得劲,修改终端字体颜色显示,类似于18或18系统,经过尝试,发现这个配置蛮好用: 12# 在.bashrc中将原来的PS1注释,然后改为下述PS1=&quot;\[\e[32m\]\[\e[01;31m\]\u@\[\e[36m\]\h:\W\$\[\e[m\]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[aria2c安装]]></title>
    <url>%2F2019%2F07%2F24%2Faria2c%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[aria2c由于平时用的ubuntu系统比较多,但是有的时候又想要用百度云盘下些东西,所以安装一个aria2c 安装1. 命令行安装 1sudo apt-get install aria2 2. 安装包安装 官网下载,然后make命令安装 配置1. 配置文件 1234sudo mkdir /etc/aria2 #新建文件夹sudo touch /etc/aria2/aria2.session #新建session文件sudo chmod 777 /etc/aria2/aria2.session #设置aria2.session可写sudo vi /etc/aria2/aria2.conf #创建并编辑配置文件 2. aria2.conf配置: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150## 全局设置 ## ============================================================# 日志#log-level=warn#log=/PATH/.aria2/aria2.log# 后台运行daemon=true# 下载位置, 默认: 当前启动位置dir=/home/chengj/下载/aria2# 从会话文件中读取下载任务input-file=/etc/aria2/aria2.session# 在Aria2退出时保存`错误/未完成`的下载任务到会话文件save-session=/etc/aria2/aria2.session# 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0save-session-interval=30# 断点续传continue=true# 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M#disk-cache=32M# 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc# 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc# falloc和trunc则需要文件系统和内核支持# NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项file-allocation=none# 客户端伪装user-agent=netdisk;5.2.6;PC;PC-Windows;6.2.9200;WindowsBaiduYunGuanJiareferer=http://pan.baidu.com/disk/home# 禁用IPv6, 默认:falsedisable-ipv6=true# 其他always-resume=truecheck-integrity=true## 下载位置 ## ============================================================# 最大同时下载任务数, 运行时可修改, 默认:5max-concurrent-downloads=5# 同一服务器连接数, 添加时可指定, 默认:1max-connection-per-server=5# 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M# 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载min-split-size=10M# 单个任务最大线程数, 添加时可指定, 默认:5split=5# 整体下载速度限制, 运行时可修改, 默认:0#max-overall-download-limit=0# 单个任务下载速度限制, 默认:0#max-download-limit=0# 整体上传速度限制, 运行时可修改, 默认:0#max-overall-upload-limit=0# 单个任务上传速度限制, 默认:0#max-upload-limit=0## RPC设置 ## ============================================================# 启用RPC, 默认:falseenable-rpc=true# 允许所有来源, 默认:falserpc-allow-origin-all=true# 允许非外部访问, 默认:falserpc-listen-all=true# 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同#event-poll=select# RPC监听端口, 端口被占用时可以修改, 默认:6800rpc-listen-port=6800# 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项#rpc-secret=&lt;TOKEN&gt;# 是否启用 RPC 服务的 SSL/TLS 加密,# 启用加密后 RPC 服务需要使用 https 或者 wss 协议连接#rpc-secure=true# 在 RPC 服务中启用 SSL/TLS 加密时的证书文件,# 使用 PEM 格式时，您必须通过 --rpc-private-key 指定私钥#rpc-certificate=/path/to/certificate.pem# 在 RPC 服务中启用 SSL/TLS 加密时的私钥文件#rpc-private-key=/path/to/certificate.key## BT/PT下载相关 ## ============================================================# 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true#follow-torrent=true# BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999listen-port=51413# 单个种子最大连接数, 默认:55#bt-max-peers=55# 打开DHT功能, PT需要禁用, 默认:trueenable-dht=false# 打开IPv6 DHT功能, PT需要禁用#enable-dht6=false# DHT网络监听端口, 默认:6881-6999#dht-listen-port=6881-6999dht-file-path=/opt/var/aria2/dht.datdht-file-path6=/opt/var/aria2/dht6.dat# 本地节点查找, PT需要禁用, 默认:false#bt-enable-lpd=false# 种子交换, PT需要禁用, 默认:trueenable-peer-exchange=false# 每个种子限速, 对少种的PT很有用, 默认:50K#bt-request-peer-speed-limit=50K# 设置 peer id 前缀peer-id-prefix=-TR2770-# 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0seed-ratio=0# 强制保存会话, 即使任务已经完成, 默认:false# 较新的版本开启后会在任务完成后依然保留.aria2文件#force-save=false# BT校验相关, 默认:true#bt-hash-check-seed=true# 继续之前的BT任务时, 无需再次校验, 默认:falsebt-seed-unverified=true# 保存磁力链接元数据为种子文件(.torrent文件), 默认:falsebt-save-metadata=truebt-max-open-files=16运行aria2``` # 运行 sudo aria2c --conf-path=/etc/aria2/aria2.conf # 后台运行 sudo aria2c --conf-path=/etc/aria2/aria2.conf -D ``` 对应插件要运行aria2,需要浏览器安装对应的插件,firefox的BaiduExporter, chrome插件商城没有,需要自行安装可以在Aria2 Web控制台查看下载或者是在Glutton查看]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>aria2c</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写给小白的express学习笔记1]]></title>
    <url>%2F2019%2F07%2F23%2Ftags%2F</url>
    <content type="text"><![CDATA[这是一篇测试用的撒旦撒]]></content>
      <tags>
        <tag>node.js</tag>
        <tag>express</tag>
      </tags>
  </entry>
</search>
